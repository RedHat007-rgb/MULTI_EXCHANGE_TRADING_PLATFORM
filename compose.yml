services:
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - timescale_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-trader} -d ${POSTGRES_DB:-trading}",
        ]
      interval: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    env_file: .env
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-trader}:${POSTGRES_PASSWORD:-safe}@timescaledb:5432/${POSTGRES_DB:-trading}
      REDIS_URL: redis://redis:6379
      KAFKA_BROKER: kafka:9092
      JWT_SECRET: ${JWT_SECRET}
      API_KEYS: ${API_KEYS}
      NODE_ENV: development
    depends_on:
      timescaledb:
        condition: service_healthy
    ports:
      - "3000:3000"

  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    env_file: .env
    environment:
      NODE_ENV: development
    ports:
      - "3001:3001"

volumes:
  timescale_data:
